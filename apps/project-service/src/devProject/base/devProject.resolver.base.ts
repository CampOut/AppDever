/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateDevProjectArgs } from "./CreateDevProjectArgs";
import { UpdateDevProjectArgs } from "./UpdateDevProjectArgs";
import { DeleteDevProjectArgs } from "./DeleteDevProjectArgs";
import { DevProjectCountArgs } from "./DevProjectCountArgs";
import { DevProjectFindManyArgs } from "./DevProjectFindManyArgs";
import { DevProjectFindUniqueArgs } from "./DevProjectFindUniqueArgs";
import { DevProject } from "./DevProject";
import { EpicFindManyArgs } from "../../epic/base/EpicFindManyArgs";
import { Epic } from "../../epic/base/Epic";
import { User } from "../../user/base/User";
import { DevProjectService } from "../devProject.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DevProject)
export class DevProjectResolverBase {
  constructor(
    protected readonly service: DevProjectService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DevProject",
    action: "read",
    possession: "any",
  })
  async _devProjectsMeta(
    @graphql.Args() args: DevProjectCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DevProject])
  @nestAccessControl.UseRoles({
    resource: "DevProject",
    action: "read",
    possession: "any",
  })
  async devProjects(
    @graphql.Args() args: DevProjectFindManyArgs
  ): Promise<DevProject[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DevProject, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DevProject",
    action: "read",
    possession: "own",
  })
  async devProject(
    @graphql.Args() args: DevProjectFindUniqueArgs
  ): Promise<DevProject | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DevProject)
  @nestAccessControl.UseRoles({
    resource: "DevProject",
    action: "create",
    possession: "any",
  })
  async createDevProject(
    @graphql.Args() args: CreateDevProjectArgs
  ): Promise<DevProject> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        owner: {
          connect: args.data.owner,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DevProject)
  @nestAccessControl.UseRoles({
    resource: "DevProject",
    action: "update",
    possession: "any",
  })
  async updateDevProject(
    @graphql.Args() args: UpdateDevProjectArgs
  ): Promise<DevProject | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          owner: {
            connect: args.data.owner,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DevProject)
  @nestAccessControl.UseRoles({
    resource: "DevProject",
    action: "delete",
    possession: "any",
  })
  async deleteDevProject(
    @graphql.Args() args: DeleteDevProjectArgs
  ): Promise<DevProject | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Epic], { name: "epics" })
  @nestAccessControl.UseRoles({
    resource: "Epic",
    action: "read",
    possession: "any",
  })
  async resolveFieldEpics(
    @graphql.Parent() parent: DevProject,
    @graphql.Args() args: EpicFindManyArgs
  ): Promise<Epic[]> {
    const results = await this.service.findEpics(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "owner",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldOwner(
    @graphql.Parent() parent: DevProject
  ): Promise<User | null> {
    const result = await this.service.getOwner(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
